#!/usr/bin/perl

use warnings;
use strict;

use POE qw(Component::Server::TCP Filter::HTTPD);
use HTTP::Response;

use Data::Dumper;

# Spawn a web server on port 8088 of all interfaces.

my $file_base = '/library/data/leader_boards/ALMS-17954-4-%d.html';
my $start_at = 250;   # session ends around 270

POE::Component::Server::TCP->new(
  Alias        => "web_server",
  Port         => 8088,
  ClientFilter => 'POE::Filter::HTTPD',
  #ClientOutputFilter => 'POE::Filter::Stream',

  Started      => sub {
      my ($heap) = $_[HEAP];
      print "Web server start. Ctrl-C to stop.\n";
  },


  # The ClientInput function is called to deal with client input.
  # Because this server uses POE::Filter::HTTPD to parse input,
  # ClientInput will receive HTTP requests.

  ClientInput => sub {
    my ($kernel, $heap, $request) = @_[KERNEL, HEAP, ARG0];

    # Filter::HTTPD sometimes generates HTTP::Response objects.
    # They indicate (and contain the response for) errors that occur
    # while parsing the client's HTTP request.  It's easiest to send
    # the responses as they are and finish up.

    if ($request->isa("HTTP::Response")) {
      $heap->{client}->put($request);
      $kernel->yield("shutdown");
      return;
    }
    
    #print Dumper($request);
    # for ALMS stuff I want does not have referer tag
    if (defined $request->{_headers}{referer}) {
        $kernel->yield("shutdown");
	return;
    }

    # The request is real and fully formed.  Build content based on
    # it.  Insert your favorite template module here, or write your
    # own. :)

    my $response = HTTP::Response->new(200);
    $response->push_header('Content-type', 'text/html');

    my $filename = sprintf($file_base, $start_at);
    #print Dumper($heap->client_healp);
    print "going to dish out: $filename\n";

    ++$start_at;

    if (!-e $filename) {
	print "that file doesn't exist! skipping\n";
	return;
    }
    
    my $fh = IO::File->new("< $filename");

    my $contents;

    {
        local $/ = undef;
	$contents = <$fh>;
    }

    $fh->close;

    $contents =~ s/\r//g;
    
    $response->content( $contents );

    # Once the content has been built, send it back to the client
    # and schedule a shutdown.
    #print "response: $response\n";
    $heap->{client}->put($response);
    $kernel->yield("shutdown");
  }
);



# Start POE.  This will run the server until it exits.

$poe_kernel->run();
exit 0;
