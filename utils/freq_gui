#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use RaceControl::Utils;

use Tk;
use POE;

use DBI;

use Tk::HList;
use Tk::JComboBox;
use Tk::TextUndo;

use Tie::IxHash;

#use Time::Local;
#use Switch 'Perl6';
#use Switch '__';

use Config::General;

use Data::Dumper;

POE::Session->create 
          (inline_states =>
	   {
            _start       => \&start,
	    update       => \&update,
	    edit_freq    => \&edit_freq,
	    add_freq     => \&add_freq,
	    del_freq     => \&del_freq,
            cancel_freq  => \&cancel_freq,
	    save_freq    => \&save_freq,
	    set_filter   => \&set_filter,
            
	   }
);



sub start {
    my ($kernel, $heap, $session) = @_[ KERNEL, HEAP, SESSION ];

    my $config_file = "$Bin/../config/race_control.conf";
    unless (-e $config_file) {
	die "There is no $config_file";
    }
    my $conf = new Config::General( -ConfigFile => $config_file,
                                    -Tie => 'Tie::IxHash');
    $heap->{config} = { $conf->getall };

    #print Dumper($heap->{config});

    $kernel->alias_set( 'ui' );

    my $main_font  = $heap->{config}{freq_gui}{main_font};
    my $small_font = $heap->{config}{freq_gui}{small_font};
   
    $poe_main_window->minsize( qw(840 500) );
    $poe_main_window->title('Frequency Editor');
    $poe_main_window->configure( -background => 'lightgrey' );
     
    my $menu_bar = $poe_main_window->Frame()->pack( -side => 'top', -fill => 'x' );

    # File

    my $file_mb = $menu_bar->Menubutton( -text => 'File',
                             )->pack( -side => 'left');

    $file_mb->command( -label => 'Exit',
         -command => sub { $poe_main_window->destroy });

    my $sel_frame = $poe_main_window->Frame->pack( -side => 'top',
                                                   -fill => 'both',
						   -expand => 1 );
    my $query_frame = $poe_main_window->Frame->pack( -side => 'top',
                                                   -fill => 'both',
						   -expand => 1 );
    my $freq_frame = $poe_main_window->Frame->pack( -side => 'top',
                                                   -fill => 'both',
						   -expand => 1 );
    my $edit_frame = $poe_main_window->Frame->pack( -side => 'top',
                                                   -fill => 'x',
						   -expand => 0 );
    my $btn_frame = $poe_main_window->Frame->pack( -side => 'top',
                                                   -fill => 'x',
						   -expand => 0 );


    my %opts = (
                              -font => $small_font,
	           );

    $heap->{cmd_box} = $query_frame->TextUndo( %opts,
					       -height => 8,
					       -background => 'white'
                                        );

    #print Dumper($heap->{config}{freq_gui}{speedlist});

    my $speedlist = $heap->{config}{freq_gui}{speedlist};
    my @cmd_choices = map {{-name=>$_, -value=>$speedlist->{$_}{filter}}} keys %$speedlist;

    my $cmd_sel = $sel_frame->JComboBox( %opts, 
                                       -choices => \@cmd_choices ,
				       -entrywidth => 15,
					-selectcommand => sub {
					    my ($self, $item) = @_;
					    $heap->{cmd_box}->delete( '0.0', 'end' );
					    $heap->{cmd_box}->Insert( $self->getSelectedValue() );
					}

                                       );


    my $test = 'thing';
    my $cmd_btn = $sel_frame->Button( %opts, -text => 'Query',
#		-command => $session->postback('set_filter' => $cmd_box->get() ),
		-command => $session->postback('set_filter'),
                              );
    my $cnt_desc = $sel_frame->Label( %opts, -text => 'Total freqs in query is' );
    my $cnt_amount = $sel_frame->Label( %opts, 
                                       -textvariable => \$heap->{count} );


    # default the filter
    #$heap->{filter} = '1=1';
    $heap ->{filter} = $speedlist->{All}{filter};


    $cmd_sel->pack( -side => 'left' );
    $cmd_btn->pack( -side => 'left' );
    $cnt_desc->pack( -side => 'left' );
    $cnt_amount->pack( -side => 'left' );
    $heap->{cmd_box}->pack( -side => 'top',
                            -fill => 'both' );


    my $freq_width   =  9;
    my $desig_width  = 50;
    my $groups_width = 20;

    my $list = $freq_frame->Scrolled("HList",
			-header => 1,
			-font => $main_font,
			-columns => 3,
			-scrollbars => 'osoe',
			-width => 20,
			-selectbackground => 'SeaGreen3',
			-selectmode => 'single',
			-browsecmd => $session->postback('edit_freq'),
		       )->pack(-side => 'left', -expand => 1, -fill => 'both');

    $list->header('create', 0, -text => 'Freq');
    $list->columnWidth(0, -char, $freq_width);
    $list->header('create', 1, -text => 'Designator');
    $list->columnWidth(1, -char, $desig_width);
    $list->header('create', 2, -text => 'Groups');
    $list->columnWidth(2, -char, $groups_width);

    $heap->{freq_edit} = $edit_frame->Entry( -width => $freq_width, -font => $main_font, -text => '' )->pack( -side => 'left');
    $heap->{desig_edit} = $edit_frame->Entry( -width => $desig_width, -font => $main_font, -text => '' )->pack( -side => 'left');
    $heap->{groups_edit} = $edit_frame->Entry( -width => $groups_width, -font => $main_font, -text => '' )->pack( -side => 'left');

    my $add_btn = $btn_frame->Button( 
               -text => 'Add', -font => $small_font,
               -command => $session->postback('add_freq')
                                     )->pack( -side => 'left' );
    my $del_btn = $btn_frame->Button( 
               -text => 'Delete', -font => $small_font,
               -command => $session->postback('del_freq')
                                     )->pack( -side => 'left' );
    my $save_btn = $btn_frame->Button( 
               -text => 'Save', -font => $small_font,
               -command => $session->postback('save_freq')
                                     )->pack( -side => 'left' );

    $heap->{freq_grid} = $list;

    my $dbargs = {AutoCommit => 1,
                  PrintError => 1};

    my $db = RaceControl::Utils::abs_path($heap->{config}{database}{name});
    my $dbh = DBI->connect("dbi:SQLite:dbname=$db","","",$dbargs);
    
    # put the db handle on the heap because later adhoc queries will be run
    $heap->{dbhandle} = $dbh;

    #$heap->{freq_list} = $dbh->prepare( 'select frequency, designator, groups from freqs order by designator' );
    $heap->{delete_freq} = $dbh->prepare( 'delete from freqs where frequency = ? and designator = ?' );
    $heap->{insert_freq} = $dbh->prepare( 'insert into freqs (frequency, designator, groups, source) values (?, ?, ?, ?)' );

    $kernel->yield( 'update', 'none', 'none' );
}

sub set_filter {
    my ($heap, $kernel) = @_[ HEAP, KERNEL ];

    # yep, it's all very hacky.

    $heap->{filter} = $heap->{cmd_box}->get('0.0', 'end');

    $kernel->yield( 'update', 'none', 'none' );

}

sub update {
    my ($heap, $freq, $designator) = @_[ HEAP, ARG0, ARG1 ];

#    my $sql = 'select distinct freqs.frequency, freqs.designator, freqs.groups from freqs,radiolog where ' . $heap->{filter} . ' order by freqs.groups';
    #my $sql = 'select distinct freqs.frequency, freqs.designator, freqs.groups from freqs,radiolog where ' . $heap->{filter};

    
    my $sql = $heap->{filter};
    #print "sql: $sql\n";
    #my $sql = "select frequency, designator, groups from freqs where $heap->{filter} order by groups";
    my $sth = $heap->{dbhandle}->prepare( $sql );
    $sth->execute();

    my @freqs = @{ $sth->fetchall_arrayref( {} ) };

    my $freq_grid = $heap->{freq_grid};
    $freq_grid->delete('all');

    my $i=0;
    foreach (@freqs) {
	$freq_grid->add($i);
	$freq_grid->itemCreate($i, 0, -text => $_->{frequency});
	$freq_grid->itemCreate($i, 1, -text => $_->{designator});
	$freq_grid->itemCreate($i, 2, -text => $_->{groups});

	if (($_->{frequency} eq $freq) and ($_->{designator} eq $designator)) {
	    $freq_grid->selectionSet($i);
	    $freq_grid->yview($i);
        }

	$i++;
    }

    $heap->{count} = scalar(@freqs);


}

sub edit_freq {
    my ($heap, $postback) = @_[ HEAP, ARG1 ];

    my $itm;

    $itm = $postback->[0];

    my $freq       = $heap->{freq_grid}->itemCget($itm, 0, "-text");
    my $designator = $heap->{freq_grid}->itemCget($itm, 1, "-text");
    my $groups     = $heap->{freq_grid}->itemCget($itm, 2, "-text");

    $heap->{freq_edit}->configure( -text => $freq );
    $heap->{desig_edit}->configure( -text => $designator );
    $heap->{groups_edit}->configure( -text => $groups );
}

sub add_freq {
    my $heap = $_[ HEAP ];

    $heap->{freq_grid}->selectionClear;

    $heap->{freq_edit}->delete( 0, 'end' );

}

sub save_freq {
    my ($kernel, $heap) = @_[ KERNEL, HEAP ];

    my $freq = $heap->{freq_edit}->get;
    my $designator = $heap->{desig_edit}->get;
    my $groups = $heap->{groups_edit}->get;

    # if it already exists, delete it
    $heap->{delete_freq}->execute( $freq, $designator );

    $heap->{insert_freq}->execute( $freq, $designator, $groups, 'user' );

    $kernel->yield( 'update', $freq, $designator );    
}

sub del_freq {
    my ($kernel, $heap) = @_[ KERNEL, HEAP ];

    my $freq = $heap->{freq_edit}->get;
    my $designator = $heap->{desig_edit}->get;
    my $groups = $heap->{groups_edit}->get;

    $heap->{delete_freq}->execute( $freq, $designator );

    $kernel->yield( 'update', 'none', 'none' );    
}


$poe_kernel->run();
